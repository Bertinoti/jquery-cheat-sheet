var allSelectors = [
    {
        title: `Iterate a collection of elements`,
        idButtonClick: 'iterateCollectionidButtonClick',
        divdisplay: 'iterateCollectiondivdisplay',
        functionIdJs: 'iterateCollectionfunctionIdJs',
        functionJs: () => { iterateCollectionfunctionJs() },
        jsText: " allP = document.querySelectorAll('p') <br> allP.forEach(element => { <br> element.classList.add('pClassGreen') <br> });",
        IdTestResultjs: 'iterateCollectionIdTestResultjs',
        functionIdJq: 'iterateCollectionfunctionIdJq',
        functionJq: () => { iterateCollectionfunctionJq() },
        jqText: "$('p').each(function (indexInArray, valueOfElement) { <br> $(valueOfElement).addClass('pClassGreen') <br> })",
        IdTestResultjq: 'iterateCollectionIdTestResultjq'
    },
    {
        title: `Parent Element`,
        idButtonClick: 'parentElementidButtonClick',
        divdisplay: 'parentElementdivdisplay',
        functionIdJs: 'parentElementfunctionIdJs',
        functionJs: () => { parentElementfunctionJs() },
        jsText: " parent= pOne.parentElement <br> parent.style.fontWeight = 'bolder';",
        IdTestResultjs: 'parentElementIdTestResultjs',
        functionIdJq: 'parentElementfunctionIdJq',
        functionJq: () => { parentElementfunctionJq() },
        jqText: " el.parent().css('fontWeight' , 'bolder')",
        IdTestResultjq: 'parentElementIdTestResultjq'
    },
    {
        title: `Children Element`,
        idButtonClick: 'childrenElementidButtonClick',
        divdisplay: 'childrenElementdivdisplay',
        functionIdJs: 'childrenElementfunctionIdJs',
        functionJs: () => { childrenElementfunctionJs() },
        jsText: " children= divOne.childrenElement <br> children.style.fontWeight = 'bolder';",
        IdTestResultjs: 'childrenElementIdTestResultjs',
        functionIdJq: 'childrenElementfunctionIdJq',
        functionJq: () => { childrenElementfunctionJq() },
        jqText: " $('#div1id').children().css('fontWeight' , 'bolder')",
        IdTestResultjq: 'childrenElementIdTestResultjq'
    },
    {
        title: `Class Element`,
        idButtonClick: 'classElementidButtonClick',
        divdisplay: 'classElementdivdisplay',
        functionIdJs: 'classElementfunctionIdJs',
        functionJs: () => { classElementfunctionJs() },
        jsText: " elems = document.getElementsByClassName('pdif') <br> for (var i = 0; i < elems.length; ++i) { <br> elems[i].style.fontWeight = 'bolder'; <br>}  " ,
        IdTestResultjs: 'classElementIdTestResultjs',
        functionIdJq: 'classElementfunctionIdJq',
        functionJq: () => { classElementfunctionJq() },
        jqText: " $('.pdifjq').css('font-weight', 'bolder'); ",
        IdTestResultjq: 'classElementIdTestResultjq'
    },
    {
        title: `Get Element By Id`,
        idButtonClick: 'getElementbyididButtonClick',
        divdisplay: 'getElementbyiddivdisplay',
        functionIdJs: 'getElementbyidfunctionIdJs',
        functionJs: () => { getElementbyidfunctionJs() },
        jsText: "  pOneId= document.getElementById('pOneidjs') <br> pOneId.style.fontWeight = 'bolder';  " ,
        IdTestResultjs: 'getElementbyidIdTestResultjs',
        functionIdJq: 'getElementbyidfunctionIdJq',
        functionJq: () => { getElementbyidfunctionJq() },
        jqText: " $('#pOneidjq').css('fontWeight' , 'bolder') ",
        IdTestResultjq: 'getElementbyidIdTestResultjq'
    },
    {
        title: `Get all the elements that have a certain class and the display property of none and change their font color and the display itself so itâ€™s visible`,
        idButtonClick: 'displaynoneandblockElementidButtonClick',
        divdisplay: 'displaynoneandblockElementdivdisplay',
        functionIdJs: 'displaynoneandblockElementfunctionIdJs',
        functionJs: () => {displaynoneandblockElementfunctionIdJs()},
        jsText: 'function getElemsNoneClass() {let allElems = document.getElementsByClassName("allElems");for (const elem of allElems) {if (elem.style.display == "none") {elem.style.display = "block";elem.style.color = "red";}}}',
        IdTestResultjs: 'displaynoneandblockElementIdTestResultjs',
        functionIdJq: 'displaynoneandblockElementfunctionIdJq',
        functionJq: () => {displaynoneandblockElementfunctionIdJq()},
        jqText: '$(".elem").each(function (index, element) {if ($(this).css("display") == "none") {$(this).css("display", "block");$(this).css("color", "black");}});',
        IdTestResultjq: 'displaynoneandblockElementIdTestResultjq'
    },
    {
        title: `Change the href attribute of the first a element`,
        idButtonClick: 'changehrefattributeElementidButtonClick',
        divdisplay: 'changehrefattributeElementdivdisplay',
        functionIdJs: 'changehrefattributeElementfunctionIdJs',
        functionJs: () => {changehrefattributeElementfunctionIdJs()},
        jsText: 'let firstA = document.querySelector("a");firstA.href = "AAA";',
        IdTestResultjs: 'changehrefattributeElementIdTestResultjs',
        functionIdJq: 'changehrefattributeElementfunctionIdJq',
        functionJq: () => {changehrefattributeElementfunctionIdJq()},
        jqText: 'let firstA = $("a").first();firstA.attr("href", "nuevoSrc");',
        IdTestResultjq: 'changehrefattributeElementIdTestResultjq'
    },
    {
        title: `Remove all items from a specific selector`,
        idButtonClick: 'removeallitemsElementidButtonClick',
        divdisplay: 'removeallitemsElementdivdisplay',
        functionIdJs: 'removeallitemsElementfunctionIdJs',
        functionJs: () => {removeallitemsElementfunctionIdJs()},
        jsText: ' let allElems = document.querySelectorAll(".allElems");for (const elem of allElems) {elem.remove();};',
        IdTestResultjs: 'removeallitemsElementIdTestResultjs',
        functionIdJq: 'removeallitemsElementfunctionIdJq',
        functionJq: () => {removeallitemsElementfunctionIdJq()},
        jqText: '$(".allElems").remove();',
        IdTestResultjq: 'removeallitemsElementIdTestResultjq'
    }
]